import streamlit as st

from utils import *
from query import *
from vector_store import *

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Chroma ---
collection = get_chroma_collection()

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —á–∞—Ç—É ---
if "messages" not in st.session_state:
    st.session_state.messages = []

if "processing" not in st.session_state:
    st.session_state.processing = False

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("Multimodal RAG (The Batch)")

# --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É ---
chat_container = st.container()
with chat_container:
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if message["type"] == "text":
                st.write(message["content"])
            elif message["type"] == "image":
                st.image(message["content"], caption="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            elif message["type"] == "response":
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–µ–∫—Å—Ç —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if isinstance(message["content"], dict):
                    if "text" in message["content"] and message["content"]["text"]:
                        st.write("**–¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:**")
                        st.write(message["content"]["text"])
                    
                    if "image_path" in message["content"] and message["content"]["image_path"]:
                        st.write("**–ü–æ–≤'—è–∑–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:**")
                        try:
                            st.image(message["content"]["image_path"])
                        except:
                            st.write(f"–®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {message['content']['image_path']}")
                else:
                    st.write(message["content"])

# --- –û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
def process_message():
    st.session_state.processing = True
    
    try:
        # –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if uploaded_file:
            img = img_np(uploaded_file)
            
            # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É
            st.session_state.messages.append({
                "role": "user",
                "type": "image",
                "content": img
            })
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            retriever = ImageInputRetriever(image=img)
            response = retriever.query(collection)
            
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            st.session_state.messages.append({
                "role": "assistant",
                "type": "response",
                "content": response
            })
        
        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
        elif user_input:
            # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É
            st.session_state.messages.append({
                "role": "user",
                "type": "text",
                "content": user_input
            })
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
            retriever = TextInputRetriever(text=user_input)
            response = retriever.query(collection)
            
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            st.session_state.messages.append({
                "role": "assistant",
                "type": "response",
                "content": response
            })
        
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è –≤–≤–æ–¥—É
        st.session_state.user_input = ""
        
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}")
    
    finally:
        st.session_state.processing = False

# --- –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
with st.container():
    st.divider()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥—É
    input_col1, input_col2, send_col = st.columns([3, 2, 1])

    with input_col1:
        user_input = st.text_input(
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç:", 
            key="user_input",
            placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...",
            disabled=st.session_state.processing
        )

    with input_col2:
        uploaded_file = st.file_uploader(
            "–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
            type=["png", "jpg", "jpeg"],
            key="file_uploader",
            disabled=st.session_state.processing
        )

    with send_col:
        send_button = st.button(
            "üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", 
            disabled=st.session_state.processing or (not user_input and not uploaded_file),
            use_container_width=True
        )

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç"):
        st.session_state.messages = []
        st.rerun()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
if send_button:
    process_message()
    st.rerun()